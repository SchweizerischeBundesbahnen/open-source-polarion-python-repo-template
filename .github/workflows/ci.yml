---
name: Build & Release
on:
  push:
    branches: ['**']
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
jobs:
  verify-with-tox:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: ðŸ“„ Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: ðŸ§± Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      - name: ðŸ§± Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        with:
          python-version: '3.13'
          cache: poetry
      - name: ðŸ§± Install dependencies
        run: poetry install --all-extras
      - name: ðŸ§ª Run tests
        run: poetry run tox
      - name: SonarCloud scan for PR
        uses: sonarsource/sonarqube-scan-action@aa494459d7c39c106cc77b166de8b4250a32bb97  # v5.1.0
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: |
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
      - name: SonarCloud scan for Push
        uses: sonarsource/sonarqube-scan-action@aa494459d7c39c106cc77b166de8b4250a32bb97  # v5.1.0
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: |
            -Dsonar.branch.name=${{ github.head_ref }}
  release-please:
    needs: verify-with-tox
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref_name == 'main'
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: ðŸš€ release-please
        id: release
        uses: googleapis/release-please-action@a02a34c4d625f9be7cb89156071d8567266a2445  # v4.2.0
        with:
          release-type: python
          include-v-in-tag: false
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      version: ${{ steps.release.outputs.version }}
  build-and-publish:
    needs: release-please
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    permissions:
#      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing for PyPI
      contents: write  # Required for uploading artifacts to GitHub release
    steps:
      - name: ðŸ“„ Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: ðŸ§± Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      - name: ðŸ§± Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        with:
          python-version: '3.13'
          cache: poetry
      - name: ðŸ§± Install dependencies
        run: poetry install
      - name: ðŸ“¦ Build the package
        run: poetry build
      - name: ðŸ“¦ Publish artifacts to GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_VERSION: needs.release-please.outputs.version
        run: gh release upload "${RELEASE_VERSION}" dist/*.{tar.gz,whl}
#      - name: ðŸ“¦ Publish artifacts to PyPI/TestPyPI
#        env:
#          name: testpypi
#          url: https://test.pypi.org/p/python-requirements-inspector
#          name: pypi
#          url: https://pypi.org/p/python-requirements-inspector
#        uses: pypa/gh-action-pypi-publish@release/v1.12.3
#        with:
#          repository-url: https://test.pypi.org/legacy/  # it must be removed when publishing to PyPI
#          verbose: true
